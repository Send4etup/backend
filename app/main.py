# app/main.py
"""
–¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend API
"""
from fastapi import FastAPI, HTTPException, Depends, status, File, UploadFile, Form, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import StreamingResponse, JSONResponse
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import uuid
import os
from pathlib import Path
from datetime import datetime
import logging
from dotenv import load_dotenv
from sqlalchemy.orm import Session

from app.auth import JWT_EXPIRATION_HOURS, JWTManager
# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from app.database import get_db
from app.dependencies import (
    get_services, get_current_user, require_tokens,
    ServiceContainer, security
)
from app.models import User, Chat, Message, Attachment
from app.services.ai import (
    get_ai_service,
    ImageProcessor,
    AudioProcessor,
    DocumentProcessor
)
from app.startup import startup_event, shutdown_event

from app.security import CORSConfig
from app.services.telegram_validator import (
    validate_telegram_init_data,
    TelegramDataValidationError
)

# from fastapi_csrf_protect import CsrfProtect
# from fastapi_csrf_protect.exceptions import CsrfProtectError
# from app.security import CORSConfig, init_csrf_protection, get_csrf_error_response

import magic
from PIL import Image


load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="–¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç API",
    description="–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORSConfig.get_allowed_origins(),  # ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,  # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_methods=CORSConfig.get_allowed_methods(),
    allow_headers=CORSConfig.get_allowed_headers(),
    expose_headers=CORSConfig.get_expose_headers()
)

# csrf_settings = init_csrf_protection()


# @app.exception_handler(CsrfProtectError)
# async def csrf_protect_exception_handler(request: Request, exc: CsrfProtectError):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ CSRF"""
#     logger.warning(f"üõ°Ô∏è CSRF –∞—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {exc} –æ—Ç IP: {request.client.host}")
#
#     return JSONResponse(
#         status_code=status.HTTP_403_FORBIDDEN,
#         content=get_csrf_error_response()
#     )

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
app.add_event_handler("startup", startup_event)
app.add_event_handler("shutdown", shutdown_event)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SUPPORTED_IMAGE_TYPES = {
    'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/heic', 'image/heif'
}
SUPPORTED_DOCUMENT_TYPES = {
    'application/pdf', 'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'text/plain', 'application/rtf', 'text/csv',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
}
SUPPORTED_AUDIO_TYPES = {
    'audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/wave',
    'audio/x-wav', 'audio/m4a', 'audio/mp4', 'audio/aac',
    'audio/webm', 'audio/ogg', 'audio/vorbis'
}

MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 MB
MAX_FILES_PER_MESSAGE = 10

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class TelegramAuthRequest(BaseModel):
    """
    –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    """
    init_data: str  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç window.Telegram.WebApp.initData

    class Config:
        # –ü—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω–æ–≥–æ init_data –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        schema_extra = {
            "example": {
                "init_data": "query_id=AAHdF6IQAAAAAN0XohDhrOrc&user=%7B%22id%22%3A279058397%2C%22first_name%22%3A%22Test%22%7D&auth_date=1662771648&hash=c501b71e775f74ce10e377dea85a7ea24ecd640b223ea86dfe453e0eaed2e2b2"
            }
        }

class CreateChatRequest(BaseModel):
    title: str
    chat_type: Optional[str] = "general"


class SendMessageRequest(BaseModel):
    chat_id: str
    message: str
    tool_type: Optional[str] = None

class ChatContext(BaseModel):
    tool_type: str = 'general'
    agent_prompt: Optional[str] = None
    temperature: float = 0.7

class AIResponseRequest(BaseModel):
    message: str
    chat_id: Optional[str] = None
    context: ChatContext
    file_ids: Optional[List[str]] = None


class UserProfileResponse(BaseModel):
    user_id: str
    telegram_id: int
    subscription_type: str
    tokens_balance: int
    tokens_used: int
    subscription_limits: Dict[str, Any]
    created_at: str
    last_activity: str


class ChatResponse(BaseModel):
    chat_id: str
    title: str
    type: str
    messages_count: int
    tokens_used: int
    created_at: str
    updated_at: str
    last_message: Optional[str] = None


class MessageResponse(BaseModel):
    message_id: int
    chat_id: str
    role: str
    content: str
    tokens_count: int
    created_at: str
    attachments: List[Dict[str, Any]] = []
    status: str


class FileResponse(BaseModel):
    file_id: str
    file_name: str
    file_type: str
    file_size: int
    file_size_mb: float
    category: str
    icon: str
    uploaded_at: str


# =====================================================
# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
# =====================================================

@app.post("/api/auth/telegram-secure")
async def telegram_auth_secure_v2(
        auth_request: TelegramAuthRequest,
        services: ServiceContainer = Depends(get_services),
):
    """
    üîê –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π initData

    –≠—Ç–æ—Ç endpoint –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏,
    –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç replay-–∞—Ç–∞–∫ –∏ –ø–æ–¥–¥–µ–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ window.Telegram.WebApp.initData
    """
    try:
        logger.info("üîê Starting secure Telegram authentication")

        # 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º initData —Å –ø–æ–º–æ—â—å—é HMAC-SHA256
        try:
            validated_data = validate_telegram_init_data(auth_request.init_data)
            logger.info("‚úÖ Telegram initData validation successful")
        except TelegramDataValidationError as e:
            logger.warning(f"üö´ Telegram validation failed: {e}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail=f"Invalid Telegram data: {str(e)}"
            )

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = validated_data['user']
        telegram_id = user_data['id']

        logger.info(f"üÜî Validated Telegram user ID: {telegram_id}")

        # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_info = {
            'telegram_id': telegram_id,
            'first_name': user_data.get('first_name', ''),
            'last_name': user_data.get('last_name', ''),
            'username': user_data.get('username', ''),
            'language_code': user_data.get('language_code', 'ru'),
            'is_premium': user_data.get('is_premium', False),
        }

        user = await services.user_service.authenticate_or_create_user(user_info)

        # 4. –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
        token = JWTManager.create_access_token({
            "user_id": user.user_id,
            "telegram_id": user.telegram_id,
            "subscription_type": user.subscription_type,
            "auth_method": "telegram_secure",  # –û—Ç–º–µ—á–∞–µ–º –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            "auth_date": validated_data.get('auth_date')
        })

        logger.info(f"‚úÖ Secure authentication successful for user: {user.user_id}")

        return {
            "access_token": token,
            "token_type": "bearer",
            "expires_in": JWT_EXPIRATION_HOURS * 3600,
            "auth_method": "telegram_secure",
            "user": {
                "user_id": user.user_id,
                "telegram_id": user.telegram_id,
                "subscription_type": user.subscription_type,
                "tokens_balance": user.tokens_balance,
                "first_name": user_data.get('first_name', ''),
                "username": user_data.get('username', ''),
                "is_premium": user_data.get('is_premium', False)
            },
            "telegram_data": {
                "auth_date": validated_data.get('auth_date'),
                "query_id": validated_data.get('query_id'),
                "chat_type": validated_data.get('chat_type')
            }
        }

    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.error(f"‚ùå Unexpected authentication error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Authentication service temporarily unavailable"
        )


# Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@app.get("/api/auth/security-status")
async def get_security_status():
    """
    üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        from app.services.telegram_validator import get_telegram_validator
        validator = get_telegram_validator()
        validator_status = "initialized"
    except:
        validator_status = "not_initialized"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token_configured = bool(os.getenv("TELEGRAM_BOT_TOKEN"))
    environment = os.getenv("ENVIRONMENT", "development")

    return {
        "timestamp": datetime.now().isoformat(),
        "environment": environment,
        "security_features": {
            "telegram_validator": validator_status,
            "bot_token_configured": bot_token_configured,
            "jwt_auth": "enabled",
            "cors_protection": "enabled",
        },
        "available_auth_methods": {
            "telegram_secure": validator_status == "initialized",
            "telegram_test": environment == "development",
        },
        "recommendations": [
            "Use /api/auth/telegram-secure for production",
            "Disable test endpoints in production",
            "Ensure TELEGRAM_BOT_TOKEN is configured",
            "Verify CORS settings for your domain"
        ]
    }


@app.post("/api/auth/refresh")
async def refresh_token(
        token: str = Depends(security),
        services: ServiceContainer = Depends(get_services)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    if not token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token required"
        )

    try:
        new_token = JWTManager.refresh_token(token.credentials)

        return {
            "access_token": new_token,
            "token_type": "bearer",
            "expires_in": JWT_EXPIRATION_HOURS * 3600
        }

    except Exception as e:
        logger.error(f"Token refresh failed: {e}")
        raise

@app.post("/api/auth/verify")
async def verify_token_endpoint(
        user = Depends(get_current_user)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
    return {
        "valid": True,
        "user_id": user.user_id,
        "telegram_id": user.telegram_id,
        "subscription_type": user.subscription_type
    }

# =====================================================
# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
# =====================================================

@app.get("/api/user/profile-extended")
async def get_user_profile_extended(
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    –í–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ–¥–ø–∏—Å–∫—É, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        profile = services.user_service.get_user_profile(user.user_id)

        if not profile:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User profile not found"
            )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤
        chat_stats = services.chat_service.get_user_chat_statistics(user.user_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        token_stats = services.user_service.get_token_usage_stats(user.user_id, days=30)

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        recent_activity = services.chat_service.get_recent_user_activity(user.user_id, limit=5)

        return {
            "user_info": {
                "user_id": user.user_id,
                "telegram_id": user.telegram_id,
                "first_name": profile.get('first_name', ''),
                "last_name": profile.get('last_name', ''),
                "username": profile.get('username', ''),
                "language_code": profile.get('language_code', 'ru'),
                "is_premium": profile.get('is_premium', False),
                "created_at": profile.get('created_at'),
                "last_activity": profile.get('last_activity')
            },
            "subscription": {
                "type": user.subscription_type,
                "tokens_balance": user.tokens_balance,
                "tokens_used": profile.get('tokens_used', 0),
                "limits": user.get_subscription_limits(),
                "next_reset": None  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Å–±—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
            },
            "statistics": {
                "total_chats": chat_stats.get('total_chats', 0),
                "total_messages": chat_stats.get('total_messages', 0),
                "files_uploaded": chat_stats.get('files_uploaded', 0),
                "favorite_tools": chat_stats.get('favorite_tools', []),
                "token_usage_30_days": token_stats.get('tokens_used', 0),
                "days_active": token_stats.get('active_days', 0)
            },
            "recent_activity": recent_activity,
            "settings": {
                "notifications_enabled": True,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                "theme": "dark",
                "language": profile.get('language_code', 'ru')
            }
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting extended profile: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get user profile"
        )


# =====================================================
# –ß–ê–¢–´
# =====================================================

@app.post("/api/chat/create", response_model=ChatResponse)
async def create_chat(
        request: CreateChatRequest,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    try:
        chat = services.chat_service.create_chat(
            user.user_id,
            request.title,
            request.chat_type
        )

        return ChatResponse(
            chat_id=chat.chat_id,
            title=chat.title,
            type=chat.type,
            type_display=chat.get_chat_type_display(),
            messages_count=chat.messages_count,
            tokens_used=chat.tokens_used,
            created_at=chat.created_at.isoformat(),
            updated_at=chat.updated_at.isoformat(),
            last_activity=chat.last_activity.isoformat()
        )

    except Exception as e:
        logger.error(f"Error creating chat: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )


@app.get("/api/chat/history", response_model=List[ChatResponse])
async def get_chat_history(
        limit: int = 3,
        offset: int = 0,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:

        if offset == 0:
            chats_data = services.chat_service.get_user_chats(user.user_id, limit)
        else:
            logger.info('!!!!!!!!!! add pagination')
            chats_data = services.chat_service.get_user_chats_with_pagination(
                user.user_id, limit, offset
            )

        logger.info(f'Requested chat history for user: {user.user_id}, limit: {limit}, offset: {offset}')

        result = []

        for chat in chats_data:
            chat_response = ChatResponse(
                chat_id=chat["chat_id"],
                title=chat["title"],
                type=chat["type"],
                messages_count=chat["messages_count"],
                tokens_used=chat["tokens_used"],
                created_at=chat["created_at"],
                updated_at=chat["updated_at"],
                last_message=chat.get("last_message")
            )

            result.append(chat_response)

        logger.info(f'Returned {len(result)} chats')
        return result

    except Exception as e:
        logger.error(f"Error getting chat history: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get chat history"
        )


@app.get("/api/chat/{chat_id}/messages", response_model=List[MessageResponse])
async def get_chat_messages(
        chat_id: str,
        limit: int = 50,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    try:
        messages_data = services.chat_service.get_chat_history(chat_id, user.user_id, limit)

        logger.info('send result')

        return [
            MessageResponse(
                message_id=msg.message_id,
                chat_id=chat_id,
                role=msg.role,
                content=msg.content,
                tokens_count=msg.tokens_count,
                created_at=msg.created_at.isoformat(),
                attachments=[],  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
                status='sent'
            )
            for msg in messages_data
        ]

    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=str(e)
        )
    except Exception as e:
        logger.error(f"Error getting chat messages: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get chat messages"
        )


@app.put("/api/chat/{chat_id}/title")
async def update_chat_title(
        chat_id: str,
        request: dict,  # –û–∂–∏–¥–∞–µ–º {"title": "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"}
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    """
    try:
        new_title = request.get("title", "").strip()

        if not new_title:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Title cannot be empty"
            )

        if len(new_title) > 100:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Title too long (max 100 characters)"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat = services.chat_service.get_chat(chat_id, user.user_id)
        if not chat:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Chat not found or access denied"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        success = services.chat_service.update_chat_title(chat_id, user.user_id, new_title)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to update chat title"
            )

        logger.info(f"Chat title updated: {chat_id} -> '{new_title}' by user {user.user_id}")

        return {
            "status": "success",
            "message": "Chat title updated successfully",
            "chat_id": chat_id,
            "new_title": new_title
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error updating chat title: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update chat title"
        )


@app.delete("/api/chat/{chat_id}")
async def delete_chat(
        chat_id: str,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat = services.chat_service.get_chat(chat_id, user.user_id)
        if not chat:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Chat not found or access denied"
            )

        # –£–¥–∞–ª—è–µ–º —á–∞—Ç
        success = services.chat_service.delete_chat(chat_id, user.user_id)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to delete chat"
            )

        logger.info(f"Chat deleted: {chat_id} by user {user.user_id}")

        return {
            "status": "success",
            "message": "Chat deleted successfully",
            "chat_id": chat_id
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting chat: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to delete chat"
        )


@app.get("/api/chat/{chat_id}")
async def get_chat_info(
        chat_id: str,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ
    """
    try:
        chat = services.chat_service.get_chat(chat_id, user.user_id)

        if not chat:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Chat not found or access denied"
            )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        return {
            "chat_id": chat.chat_id,
            "title": chat.title,
            "type": chat.type,
            "messages_count": chat.messages_count,
            "tokens_used": chat.tokens_used,
            "created_at": chat.created_at.isoformat(),
            "updated_at": chat.updated_at.isoformat()
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting chat info: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get chat info"
        )


# =====================================================
# –°–û–û–ë–©–ï–ù–ò–Ø
# =====================================================

@app.post("/api/chat/send")
async def send_message(
        request: SendMessageRequest,
        user: User = Depends(require_tokens(1)),
        services: ServiceContainer = Depends(get_services)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:

        user_message = await services.chat_service.send_message(
            request.chat_id, user.user_id, request.message, "user"
        )

        logger.info('get message')

        return {
            "message_id": user_message.message_id,
            "status": "sent",
            "timestamp": user_message.created_at.isoformat()
        }

    except Exception as e:
        logger.error(f"Error sending message: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )


@app.post("/api/chat/send-with-files")
async def send_message_with_files(
        message: str = Form(""),
        chat_id: Optional[str] = Form(None),
        tool_type: Optional[str] = Form(None),
        files: List[UploadFile] = File(default=[]),
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    """
    try:
        logger.info(f"Sending message with {len(files)} files from user {user.user_id}")

        if not message.strip() and len(files) == 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã"
            )

        # ‚úÖ 1. –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = None

        if message.strip():
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            user_message = await services.chat_service.send_message(
                chat_id, user.user_id, message, "user"
            )
            logger.info(f"‚úÖ Sent user message: {user_message.message_id}")
        elif len(files) > 0:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã - —Å–æ–∑–¥–∞–µ–º placeholder —Å–æ–æ–±—â–µ–Ω–∏–µ
            auto_message = f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}"
            user_message = await services.chat_service.send_message(
                chat_id, user.user_id, auto_message, "user"
            )
            logger.info(f"‚úÖ Sent auto-generated message for files: {user_message.message_id}")

        # ‚úÖ 2. –¢–ï–ü–ï–†–¨ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã (user_message —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        uploaded_files = []
        file_errors = []

        for file in files:
            if not file.filename:
                continue

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
                limits = user.get_subscription_limits()
                max_size = limits["max_file_size_mb"] * 1024 * 1024

                content = await file.read()
                if len(content) > max_size:
                    file_errors.append(f"{file.filename}: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {limits['max_file_size_mb']} MB")
                    continue

                await file.seek(0)

                # ‚úÖ –¢–µ–ø–µ—Ä—å user_message.message_id —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                file_data = await save_uploaded_file(
                    file, user, services, user_message.message_id
                )
                uploaded_files.append(file_data)

                logger.info(f"Uploaded file: {file.filename} -> {file_data['file_id']}")

            except Exception as e:
                logger.error(f"Error uploading file {file.filename}: {e}")
                file_errors.append(f"{file.filename}: {str(e)}")

        # 3. –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        tokens_used = 1
        tokens_used += len(uploaded_files) * 2

        if user.tokens_balance >= tokens_used:
            services.user_service.use_tokens(user.user_id, tokens_used)
            logger.info(f"Deducted {tokens_used} tokens from user {user.user_id}")
        else:
            logger.warning(f"User {user.user_id} has insufficient tokens")

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "status": "success",
            "chat_id": chat_id,
            "message_id": user_message.message_id if user_message else None,
            "uploaded_files": uploaded_files,
            "file_errors": file_errors,
            "tokens_used": tokens_used,
            "timestamp": datetime.now().isoformat()
        }

        # 5. –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for file_data in uploaded_files:
            if file_data.get('file_type') in SUPPORTED_DOCUMENT_TYPES:
                try:
                    from app.services.file_extractor import cleanup_file

                    user_dir = UPLOAD_DIR / user.user_id
                    file_path = user_dir / file_data['file_name']

                    if cleanup_file(str(file_path)):
                        logger.info(f"üóëÔ∏è Auto-deleted processed file: {file_data['file_name']}")

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Failed to auto-delete file: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if uploaded_files and uploaded_files[0].get('extracted_text'):
            logger.info(f"üìÑ Extracted text preview: {uploaded_files[0]['extracted_text'][:200]}...")

        return response_data

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error in send_message_with_files: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to send message: {str(e)}"
        )


@app.post("/api/chat/ai-response")
async def get_ai_response(
        request: AIResponseRequest,
        user: User = Depends(require_tokens(2)),
        services: ServiceContainer = Depends(get_services)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ STREAMING –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
    try:
        if not request.chat_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Chat ID is required"
            )

        temperature = request.context.temperature
        agent_prompt = request.context.agent_prompt

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        chat_history = services.chat_service.get_chat_for_ai_context(request.chat_id, user.user_id, 20)
        logger.info(f"Chat history length: {len(chat_history)}")

        files_context = ""
        if request.file_ids:
            files_context = services.file_service.get_files_text_by_ids(request.file_ids)
            logger.info(f"Loaded {len(request.file_ids)} files for context")
            logger.info(f"Loaded {len(files_context)} chars from files")

        # –ü–æ–ª—É—á–∞–µ–º AI service
        ai_service = get_ai_service()
        if not ai_service:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="AI service is not available"
            )

        # –§—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è streaming
        async def generate_response():
            full_response = ""

            try:
                logger.info(f"Generating response for user {user.user_id}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π get_response_stream
                async for chunk in ai_service.get_response_stream(
                        request.message,
                        request.context.tool_type,
                        chat_history,
                        files_context,
                        temperature,
                        agent_prompt,
                ):
                    full_response += chunk
                    yield chunk

                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ë–î
                ai_message = await services.chat_service.send_message(
                    request.chat_id, user.user_id, full_response, "assistant", tokens_count=2
                )

                # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                services.user_service.use_tokens(user.user_id, 2)

            except Exception as e:
                logger.error(f"Streaming error: {e}")
                yield f"\n\n–û—à–∏–±–∫–∞: {str(e)}"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º StreamingResponse
        return StreamingResponse(
            generate_response(),
            media_type="text/plain",
            headers={
                "Cache-Control": "no-cache",
                "X-Accel-Buffering": "no"
            }
        )

    except Exception as e:
        logger.error(f"Error in ai_response: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@app.post("/api/chat/save-partial-response")
async def save_partial_response(
        request: dict,  # {"chat_id": str, "content": str}
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    –≠—Ç–æ—Ç endpoint –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é,
    —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ò–ò
    """
    try:
        chat_id = request.get("chat_id")
        content = request.get("content", "").strip()

        if not chat_id or not content:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å chat_id –∏ content"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        chat = services.chat_service.get_chat(chat_id, user.user_id)
        if not chat:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ–± –æ–±—Ä—ã–≤–µ
        final_content = content + "\n\n[–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞]"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –¢–æ–∫–µ–Ω—ã —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è tiktoken)
        estimated_tokens = len(content.split()) // 2

        ai_message = await services.chat_service.send_message(
            chat_id=chat_id,
            user_id=user.user_id,
            content=final_content,
            role="assistant",
            tokens_count=estimated_tokens
        )

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        services.user_service.use_tokens(user.user_id, estimated_tokens)

        logger.info(
            f"‚úÖ Saved partial AI response for chat {chat_id}, "
            f"length: {len(content)} chars, tokens: {estimated_tokens}"
        )

        return {
            "success": True,
            "message_id": ai_message.message_id,
            "saved_length": len(content),
            "estimated_tokens": estimated_tokens
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error saving partial response: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç"
        )


@app.post("/api/transcribe")
async def transcribe_audio(
        audio: UploadFile = File(...),
        language: str = Form("ru"),
        prompt: Optional[str] = Form(None)
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é

    Args:
        audio: –ê—É–¥–∏–æ —Ñ–∞–π–ª
        language: –Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
        prompt: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        JSON —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    """
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é: {audio.filename}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = Path("temp")
        temp_dir.mkdir(exist_ok=True)

        temp_path = temp_dir / f"audio_{uuid.uuid4()}.webm"

        with open(temp_path, "wb") as f:
            content = await audio.read()
            f.write(content)

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
            ai_service = get_ai_service()

            optimized_prompt = """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —Ä–µ—á—å —Ç–æ—á–Ω–æ, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. 
                –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—ã—à–Ω–æ –∏–ª–∏ —Ç–∏—à–∏–Ω–∞ - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. 
                –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π —Ç–µ—Ä–º–∏–Ω—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, 
                Python, JavaScript, —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, —Ñ–æ—Ä–º—É–ª–∞, —Ç–µ–æ—Ä–µ–º–∞."""

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
            final_prompt = prompt if prompt else optimized_prompt

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            transcribed_text = await ai_service.audio_processor.extract_text_from_audio(
                file_path=str(temp_path),
                language=language,
                prompt=final_prompt
            )

            # ‚úÖ –û–ß–ò–°–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            # Whisper –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ:"
            # –£–¥–∞–ª—è–µ–º —ç—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            if transcribed_text.startswith("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ"):
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                lines = transcribed_text.split('\n')
                if len(lines) > 1:
                    transcribed_text = '\n'.join(lines[1:]).strip()
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                    transcribed_text = transcribed_text.replace("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ:", "").strip()

            # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            unwanted_prefixes = [
                "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:",
                "–¢–µ–∫—Å—Ç:",
                "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:",
                "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:",
            ]

            for prefix in unwanted_prefixes:
                if transcribed_text.startswith(prefix):
                    transcribed_text = transcribed_text.replace(prefix, "").strip()

            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢
            # –ï—Å–ª–∏ Whisper –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏—á–µ–≥–æ –≤–Ω—è—Ç–Ω–æ–≥–æ
            if not transcribed_text or transcribed_text.strip() == "":
                logger.warning("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return JSONResponse({
                    "success": True,
                    "text": "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–∏–≥–Ω–∞–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –í–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —à—É–º."
                })

            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –¢–ï–ö–°–¢
            # Whisper –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            error_indicators = [
                "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑",
                "–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å",
                "–∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º",
                "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä",
            ]

            text_lower = transcribed_text.lower()
            if any(indicator in text_lower for indicator in error_indicators):
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {transcribed_text[:100]}")
                return JSONResponse({
                    "success": False,
                    "text": "",
                    "error": transcribed_text
                })

            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(transcribed_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"–¢–µ–∫—Å—Ç: {transcribed_text[:100]}...")

            return JSONResponse({
                "success": True,
                "text": transcribed_text.strip()
            })

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if temp_path.exists():
                temp_path.unlink()
                logger.debug(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_path.name}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}", exc_info=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = str(e)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "file too large" in error_message.lower():
            user_message = "–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25 –ú–ë"
        elif "invalid audio" in error_message.lower():
            user_message = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: MP3, WAV, WEBM, OGG"
        elif "api key" in error_message.lower():
            user_message = "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        else:
            user_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ"

        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "text": "",
                "error": user_message,
            }
        )

# =====================================================
# –§–ê–ô–õ–´
# =====================================================

async def save_uploaded_file(
        file: UploadFile,
        user: User,
        services: ServiceContainer,
        message_id: str,

) -> Dict[str, Any]:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        content = await file.read()
        await file.seek(0)

        try:
            detected_type = magic.from_buffer(content, mime=True)
            file_type = detected_type if detected_type else file.content_type
        except:
            file_type = file.content_type or 'application/octet-stream'

        logger.info(f"üìÅ Uploading file: {file.filename}, type: {file_type}, size: {len(content)} bytes")

        all_supported_types = (
                SUPPORTED_IMAGE_TYPES |
                SUPPORTED_DOCUMENT_TYPES |
                SUPPORTED_AUDIO_TYPES
        )

        if file_type not in all_supported_types:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported file type: {file_type}"
            )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = UPLOAD_DIR / user.user_id
        user_dir.mkdir(exist_ok=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        original_name = file.filename or f"file_{file_id}"
        file_extension = Path(original_name).suffix or _get_extension_by_mime(file_type)

        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞
        safe_filename = f"{file_id}{file_extension}"
        file_path = user_dir / safe_filename

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        with open(file_path, "wb") as buffer:
            buffer.write(content)

        ai_service = get_ai_service()

        # –°–æ–∑–¥–∞–µ–º thumbnail –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not ai_service:
            logger.warning("‚ö†Ô∏è AI service not available, skipping advanced processing")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
            extracted_text = None
            thumbnail_path = None
        else:
            extracted_text = None
            thumbnail_path = None

            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            if file_type in SUPPORTED_IMAGE_TYPES:
                logger.info("üì∏ Processing image file...")

                try:

                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if ai_service.image_processor.validate_image(str(file_path)):
                        # –°–æ–∑–¥–∞–Ω–∏–µ thumbnail
                        thumbnail_path = ai_service.image_processor.create_thumbnail(
                            str(file_path),
                            str(user_dir / f"thumb_{safe_filename}"),
                            size=(200, 200)
                        )

                        try:
                            extracted_text = await ai_service.analyze_image(
                                str(file_path),
                            )

                            if extracted_text and not extracted_text.startswith("–û—à–∏–±–∫–∞"):
                                logger.info(f"‚úÖ Text extracted from image: {len(extracted_text)} characters")
                            else:
                                logger.warning(f"‚ö†Ô∏è Image text extraction failed or returned error")
                                extracted_text = None

                        except Exception as extract_error:
                            logger.error(f"‚ùå Error extracting text from image: {extract_error}")
                            extracted_text = None

                        logger.info(f"‚úÖ Image processed, thumbnail created: {thumbnail_path}")
                    else:
                        logger.warning("‚ö†Ô∏è Image validation failed")

                except Exception as e:
                    logger.error(f"‚ùå Error processing image: {e}")

            # –û–ë–†–ê–ë–û–¢–ö–ê –ê–£–î–ò–û
            elif file_type in SUPPORTED_AUDIO_TYPES:
                logger.info("üéß Processing audio file...")

                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ
                    is_valid, error_msg = ai_service.audio_processor.validate_audio_file(
                        str(file_path)
                    )

                    if is_valid:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        mp3_path = await ai_service.audio_processor.convert_audio_to_mp3(
                            str(file_path)
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                        if mp3_path != str(file_path):
                            file_path = Path(mp3_path)
                            safe_filename = file_path.name
                            file_extension = file_path.suffix
                            logger.info(f"‚úÖ Audio converted to MP3: {mp3_path}")

                        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å)
                        extracted_text = await ai_service.transcribe_audio(str(file_path))
                        logger.info(f"‚úÖ Audio transcribed: {len(extracted_text)} chars")
                    else:
                        logger.warning(f"‚ö†Ô∏è Audio validation failed: {error_msg}")

                except Exception as e:
                    logger.error(f"‚ùå Error processing audio: {e}")

            # –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í
            elif file_type in SUPPORTED_DOCUMENT_TYPES:
                logger.info("üìÑ Processing document file...")

                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    is_valid, error_msg = ai_service.document_processor.validate_document(
                        str(file_path)
                    )

                    if is_valid:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                        extracted_text = await ai_service.extract_text_from_file(
                            str(file_path),
                            file_type
                        )

                        if extracted_text and not extracted_text.startswith("–û—à–∏–±–∫–∞"):
                            logger.info(f"‚úÖ Text extracted: {len(extracted_text)} characters")
                        else:
                            logger.warning(f"‚ö†Ô∏è Text extraction failed or returned error")
                            extracted_text = None
                    else:
                        logger.warning(f"‚ö†Ô∏è Document validation failed: {error_msg}")

                except Exception as e:
                    logger.error(f"‚ùå Error processing document: {e}")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        attachment = services.file_service.attachment_repo.create(
            file_id=file_id,
            message_id=message_id,
            user_id=user.user_id,
            file_name=safe_filename,
            original_name=original_name,
            file_path=str(file_path),
            file_type=file_type,
            file_size=len(content),
            thumbnail_path=thumbnail_path,
            extracted_text=extracted_text
        )

        logger.info(f"‚úÖ File saved to DB: {file_path} ({len(content)} bytes)")
        if extracted_text:
            logger.info(f"‚úÖ Extracted text saved: {len(extracted_text)} characters")

        return {
            "file_id": file_id,
            "file_name": safe_filename,
            "original_name": original_name,
            "file_type": file_type,
            "file_size": len(content),
            "file_size_mb": round(len(content) / 1024 / 1024, 2),
            "thumbnail_path": thumbnail_path,
            "uploaded_at": attachment.uploaded_at.isoformat() if attachment.uploaded_at else datetime.now().isoformat(),
            "extracted_text": extracted_text,
            "processing_status": {
                "image_processed": file_type in SUPPORTED_IMAGE_TYPES and thumbnail_path is not None,
                "audio_processed": file_type in SUPPORTED_AUDIO_TYPES,
                "document_processed": file_type in SUPPORTED_DOCUMENT_TYPES and extracted_text is not None,
                "ai_service_available": ai_service is not None
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error in save_uploaded_file: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to save file: {str(e)}"
        )

@app.post("/api/files/upload", response_model=FileResponse)
async def upload_file(
        file: UploadFile = File(...),
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        limits = user.get_subscription_limits()
        max_size = limits["max_file_size_mb"] * 1024 * 1024

        content = await file.read()
        if len(content) > max_size:
            raise HTTPException(
                status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                detail=f"File too large for your subscription. Max: {limits['max_file_size_mb']} MB"
            )

        await file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å

        file_data = await save_uploaded_file(file, user, services)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –ë–î
        attachment = services.file_service.attachment_repo.get_by_id(file_data["file_id"])

        return FileResponse(
            file_id=attachment.file_id,
            file_name=attachment.file_name,
            file_type=attachment.file_type,
            file_size=attachment.file_size,
            file_size_mb=attachment.file_size_mb,
            category=attachment.get_file_category(),
            icon=attachment.get_file_icon(),
            uploaded_at=attachment.uploaded_at.isoformat()
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error uploading file: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to upload file"
        )


@app.get("/api/files", response_model=List[FileResponse])
async def get_user_files(
        limit: int = 50,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        attachments = services.file_service.attachment_repo.get_user_files(user.user_id, limit)

        return [
            FileResponse(
                file_id=att.file_id,
                file_name=att.file_name,
                file_type=att.file_type,
                file_size=att.file_size,
                file_size_mb=att.file_size_mb,
                category=att.get_file_category(),
                icon=att.get_file_icon(),
                uploaded_at=att.uploaded_at.isoformat()
            )
            for att in attachments
        ]

    except Exception as e:
        logger.error(f"Error getting user files: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get files"
        )


@app.delete("/api/files/{file_id}")
async def delete_file(
        file_id: str,
        user: User = Depends(get_current_user),
        services: ServiceContainer = Depends(get_services)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    try:
        success = services.file_service.delete_file(file_id, user.user_id)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="File not found or access denied"
            )

        return {"status": "deleted", "file_id": file_id}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting file: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to delete file"
        )


# =====================================================
# –°–ò–°–¢–ï–ú–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# =====================================================

@app.get("/")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    ai_service = get_ai_service()
    ai_status = "available" if ai_service else "unavailable"

    if ai_service:
        try:
            ai_healthy = await ai_service.health_check()
            ai_status = "healthy" if ai_healthy else "error"
        except:
            ai_status = "error"

    return {
        "status": "ok",
        "message": "–¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç API is running",
        "version": "2.0.0",
        "timestamp": datetime.now().isoformat(),
        "ai_status": ai_status,
        "database": "sqlite_integrated"
    }


@app.get("/api/system/info")
async def get_system_info(db: Session = Depends(get_db)):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        users_count = db.query(User).count()
        chats_count = db.query(Chat).count()
        messages_count = db.query(Message).count()
        files_count = db.query(Attachment).count()

        return {
            "api_name": "–¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç API",
            "version": "2.0.0",
            "status": "running",
            "database": "SQLite",
            "features": [
                "AI Chat with GPT-4o",
                "Vision Analysis",
                "Document Processing",
                "File Upload & Management",
                "User Authentication",
                "Subscription Management",
                "Real-time Database"
            ],
            "statistics": {
                "total_users": users_count,
                "total_chats": chats_count,
                "total_messages": messages_count,
                "total_files": files_count
            },
            "file_limits": {
                "max_file_size_mb": MAX_FILE_SIZE // (1024 * 1024),
                "max_files_per_message": MAX_FILES_PER_MESSAGE,
                "supported_image_types": list(SUPPORTED_IMAGE_TYPES),
                "supported_document_types": list(SUPPORTED_DOCUMENT_TYPES),
                "supported_audio_types": list(SUPPORTED_AUDIO_TYPES)
            }
        }

    except Exception as e:
        logger.error(f"Error getting system info: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get system info"
        )


@app.post("/api/system/cleanup")
async def manual_cleanup(
        hours_old: int = 24,
        services: ServiceContainer = Depends(get_services)
):
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        deleted_count = services.file_service.cleanup_old_files(hours_old)

        return {
            "status": "completed",
            "deleted_files": deleted_count,
            "hours_old": hours_old,
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"Error during cleanup: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Cleanup failed"
        )


def _get_extension_by_mime(mime_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É"""
    mime_extensions = {
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        'image/jpeg': '.jpg',
        'image/png': '.png',
        'image/gif': '.gif',
        'image/webp': '.webp',
        'image/bmp': '.bmp',

        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        'application/pdf': '.pdf',
        'application/msword': '.doc',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
        'text/plain': '.txt',
        'application/rtf': '.rtf',
        'text/csv': '.csv',
        'application/vnd.ms-excel': '.xls',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',

        # –ê—É–¥–∏–æ
        'audio/mpeg': '.mp3',
        'audio/wav': '.wav',
        'audio/m4a': '.m4a',
        'audio/aac': '.aac',
        'audio/webm': '.webm',
        'audio/ogg': '.ogg'
    }

    return mime_extensions.get(mime_type, '.bin')

@app.get("/api/security/cors-info")
async def get_cors_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    from app.security import CORSConfig

    if not CORSConfig.is_development():
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        )

    return {
        "environment": os.getenv("ENVIRONMENT", "development"),
        "allowed_origins": CORSConfig.get_allowed_origins(),
        "allowed_methods": CORSConfig.get_allowed_methods(),
        "allowed_headers": CORSConfig.get_allowed_headers(),
        "expose_headers": CORSConfig.get_expose_headers(),
        "credentials_allowed": True
    }


# =====================================
# CSRF –ó–ê–©–ò–¢–ê ENDPOINTS
# =====================================

# @app.get("/api/security/csrf-token")
# async def get_csrf_token(
#         request: Request,
#         csrf_protect: CsrfProtect = Depends()
# ):
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –¥–ª—è frontend
#     –≠—Ç–æ—Ç endpoint –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º
#     """
#     try:
#         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π CSRF —Ç–æ–∫–µ–Ω
#         csrf_token = csrf_protect.generate_csrf()
#
#         response = JSONResponse(content={
#             "csrf_token": csrf_token,
#             "message": "CSRF —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
#             "expires_in": 3600,  # 1 —á–∞—Å
#             "usage": {
#                 "header_name": "X-CSRF-Token",
#                 "cookie_name": "csrf_token",
#                 "instructions": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-CSRF-Token –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
#             }
#         })
#
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
#         csrf_protect.set_csrf_cookie(csrf_token, response)
#
#         logger.info(f"‚úÖ CSRF —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è IP: {request.client.host if hasattr(request, 'client') else 'unknown'}")
#
#         return response
#
#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞: {e}")
#         raise HTTPException(
#             status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
#             detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞"
#         )
#
#
# @app.post("/api/security/verify-csrf")
# async def verify_csrf_token(
#         request: Request,
#         csrf_protect: CsrfProtect = Depends()
# ):
#     """
#     –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
#         await csrf_protect.validate_csrf(request)
#
#         return {
#             "valid": True,
#             "message": "CSRF —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω",
#             "timestamp": datetime.now().isoformat()
#         }
#
#     except CsrfProtectError as e:
#         logger.warning(f"CSRF –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {e}")
#         raise HTTPException(
#             status_code=status.HTTP_403_FORBIDDEN,
#             detail=get_csrf_error_response()
#         )
#
#
# @app.get("/api/security/csrf-info")
# async def get_csrf_info():
#     """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSRF –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
#     from app.security.csrf_protection import CsrfSettings
#
#     if os.getenv("ENVIRONMENT") == "production":
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND,
#             detail="Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
#         )
#
#     settings = CsrfSettings()
#
#     return {
#         "csrf_enabled": True,
#         "cookie_name": settings.cookie_name,
#         "header_name": settings.header_name,
#         "cookie_secure": settings.cookie_secure,
#         "cookie_samesite": settings.cookie_samesite,
#         "token_lifetime": settings.token_lifetime,
#         "environment": os.getenv("ENVIRONMENT", "development")
#     }


# =====================================
# ENDPOINTS –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# =====================================

@app.get("/api/security/health")
async def security_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    try:
        health_status = {
            "timestamp": datetime.now().isoformat(),
            "environment": os.getenv("ENVIRONMENT", "development"),
            "security_systems": {
                "cors_protection": "active",
                "csrf_protection": "active",
                "jwt_auth": "active"
            },
            "server_status": "healthy",
            "version": "2.0.0-secure"
        }

        return health_status

    except Exception as e:
        logger.error(f"Health check error: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Health check failed"
        )

# =====================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =====================================================

if __name__ == "__main__":
    import uvicorn

    print("üöÄ Starting –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç API with SQLite Database...")
    print("üìç Server: http://127.0.0.1:3213")
    print("üìö API Docs: http://127.0.0.1:3213/docs")
    print("üóÑÔ∏è Database: SQLite with full integration")
    print("üìÅ File uploads: uploads/ directory")

    uvicorn.run(app, host="127.0.0.1", port=3213)