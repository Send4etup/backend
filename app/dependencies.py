# app/dependencies.py - –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø

from typing import Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer
from sqlalchemy.orm import Session

from app.auth import JWTManager
from app.database import get_db
import logging

logger = logging.getLogger(__name__)
security = HTTPBearer(auto_error=False)


class ServiceContainer:
    def __init__(self, db: Session):
        self.db = db
        from app.services.user_service import UserService
        from app.services.chat_service import ChatService
        from app.services.file_service import FileService

        self.user_service = UserService(db)
        self.chat_service = ChatService(db)
        self.file_service = FileService(db)


def get_services(db: Session = Depends(get_db)) -> ServiceContainer:
    return ServiceContainer(db)


async def get_current_user(
        services: ServiceContainer = Depends(get_services),
        token: Optional[str] = Depends(security)
):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ JWT
    """
    from app.models import User

    logger.info("üîê Authenticating user with JWT token")
    logger.info(token)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not token or not token.credentials:
        logger.error("‚ùå No token provided")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authorization token required",
            headers={"WWW-Authenticate": "Bearer"}
        )

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        payload = JWTManager.verify_token(token.credentials)

        telegram_id = payload.get("telegram_id")
        user_id = payload.get("user_id")

        if not telegram_id or not user_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token payload"
            )

        logger.info(f"üîç Looking for user: {user_id} (telegram_id: {telegram_id})")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = services.user_service.user_repo.get_by_id(user_id)

        if not user:
            logger.error(f"‚ùå User not found in database: {user_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="User not found"
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ telegram_id
        if user.telegram_id != telegram_id:
            logger.error(f"‚ùå Telegram ID mismatch for user: {user_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token data mismatch"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.is_active:
            logger.warning(f"‚ö†Ô∏è Inactive user attempted access: {user_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="User account is inactive"
            )

        logger.info(f"‚úÖ User authenticated successfully: {user.user_id}")

        try:
            deleted_count = services.chat_service.cleanup_empty_chats(hours_old=24)
            if deleted_count > 0:
                logger.info(f"üßπ Auto-cleaned {deleted_count} empty chats for user {user_id}")
        except Exception as cleanup_error:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
            logger.warning(f"‚ö†Ô∏è Auto-cleanup failed for user {user_id}: {cleanup_error}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        from datetime import datetime, timezone, timedelta
        msk = timezone(timedelta(hours=3))
        services.user_service.user_repo.update_time_activity(
            user.user_id,
            last_activity=datetime.now(msk)
        )

        return user

    except HTTPException:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTPException –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        logger.error(f"‚ùå Authentication error: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication failed"
        )


def require_tokens(min_tokens: int = 1):
    """
    üöÄ –í–†–ï–ú–ï–ù–ù–ê–Ø –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í
    –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """

    def check_tokens(
            user=Depends(get_current_user),
            services: ServiceContainer = Depends(get_services)
    ):
        logger.info(f"‚úÖ Token check passed for user: {getattr(user, 'user_id', 'unknown')}")
        return user

    return check_tokens