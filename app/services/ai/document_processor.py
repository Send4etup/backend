# backend/services/ai/document_processor.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
–í–∫–ª—é—á–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF, Word, Excel, CSV –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

import logging
from pathlib import Path
from typing import Optional, Union
import PyPDF2
import docx
import pandas as pd
from openpyxl import load_workbook
import asyncio

logger = logging.getLogger(__name__)


class DocumentProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""

    def __init__(self, max_text_length: int = 10e10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        Args:
            max_text_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        self.max_text_length = max_text_length

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.supported_formats = {
            'pdf': ['.pdf'],
            'word': ['.docx', '.doc'],
            'excel': ['.xlsx', '.xls'],
            'csv': ['.csv'],
            'text': ['.txt', '.md', '.json', '.xml', '.log']
        }

    async def extract_text_from_pdf(
            self,
            file_path: str,
            max_pages: Optional[int] = None
    ) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞

        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            text = ""
            file_name = Path(file_path).name

            logger.info(f"Extracting text from PDF: {file_name}")

            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                total_pages = len(pdf_reader.pages)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                pages_to_process = min(
                    total_pages,
                    max_pages if max_pages else total_pages
                )

                logger.info(
                    f"PDF has {total_pages} pages, "
                    f"processing {pages_to_process} pages"
                )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                for page_num in range(pages_to_process):
                    try:
                        page = pdf_reader.pages[page_num]
                        page_text = page.extract_text()

                        if page_text:
                            text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n"
                            text += page_text + "\n"

                        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Ç–µ–∫—Å—Ç–∞
                        if len(text) > self.max_text_length:
                            logger.info(
                                f"Reached text length limit at page {page_num + 1}"
                            )
                            break

                    except Exception as page_error:
                        logger.warning(
                            f"Error extracting text from page {page_num + 1}: "
                            f"{page_error}"
                        )
                        continue

            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(text) > self.max_text_length:
                text = text[:self.max_text_length]
                text += "\n\n... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ –ª–∏–º–∏—Ç—É –¥–ª–∏–Ω—ã]"

            if not text.strip():
                return f"PDF —Ñ–∞–π–ª '{file_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω."

            logger.info(
                f"Successfully extracted {len(text)} characters from PDF {file_name}"
            )

            return text

        except Exception as e:
            logger.error(f"Error extracting PDF text from {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞: {str(e)}"

    async def extract_text_from_docx(
            self,
            file_path: str,
            max_paragraphs: Optional[int] = 100
    ) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Args:
            file_path: –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
            max_paragraphs: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤

        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            file_name = Path(file_path).name

            logger.info(f"Extracting text from DOCX: {file_name}")

            doc = docx.Document(file_path)
            text = ""

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
            total_paragraphs = len(doc.paragraphs)
            paragraphs_to_process = min(
                total_paragraphs,
                max_paragraphs if max_paragraphs else total_paragraphs
            )

            logger.info(
                f"DOCX has {total_paragraphs} paragraphs, "
                f"processing {paragraphs_to_process}"
            )

            for i, paragraph in enumerate(doc.paragraphs[:paragraphs_to_process]):
                if paragraph.text.strip():
                    text += paragraph.text + "\n"

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                if len(text) > self.max_text_length:
                    logger.info(
                        f"Reached text length limit at paragraph {i + 1}"
                    )
                    break

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            if doc.tables:
                text += "\n--- –¢–∞–±–ª–∏—Ü—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ ---\n"

                for table_idx, table in enumerate(doc.tables[:5]):  # –ü–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    text += f"\n–¢–∞–±–ª–∏—Ü–∞ {table_idx + 1}:\n"

                    try:
                        for row in table.rows[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                            row_text = " | ".join(
                                cell.text.strip() for cell in row.cells
                            )
                            if row_text:
                                text += row_text + "\n"
                    except Exception as table_error:
                        logger.warning(
                            f"Error extracting table {table_idx + 1}: {table_error}"
                        )

                    if len(text) > self.max_text_length:
                        break

            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(text) > self.max_text_length:
                text = text[:self.max_text_length]
                text += "\n\n... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ –ª–∏–º–∏—Ç—É –¥–ª–∏–Ω—ã]"

            if not text.strip():
                return f"Word –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."

            logger.info(
                f"Successfully extracted {len(text)} characters from DOCX {file_name}"
            )

            return text

        except Exception as e:
            logger.error(f"Error extracting DOCX text from {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"

    async def extract_text_from_excel(
            self,
            file_path: str,
            max_rows_per_sheet: Optional[int] = 10000
    ) -> str:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Excel —Å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        """
        try:
            file_name = Path(file_path).name
            logger.info(f"Reading Excel: {file_name}")

            wb = await asyncio.to_thread(load_workbook, file_path, data_only=True)
            text_parts = []

            for sheet in wb.worksheets[:5]:
                text_parts.append(f"\nüìÑ –õ–∏—Å—Ç: {sheet.title}\n{'-' * 40}")

                for i, row in enumerate(sheet.iter_rows(values_only=True)):
                    if max_rows_per_sheet and i >= max_rows_per_sheet:
                        text_parts.append("... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã]")
                        break

                    values = [str(cell).strip() for cell in row if cell not in (None, "")]
                    if values:
                        text_parts.append(" | ".join(values))

                    if sum(len(p) for p in text_parts) > self.max_text_length:
                        text_parts.append("... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ –ª–∏–º–∏—Ç—É]")
                        break

            text = "\n".join(text_parts)
            return text if text.strip() else f"Excel —Ñ–∞–π–ª '{file_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."

        except Exception as e:
            logger.error(f"Error reading Excel file {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}"

    async def extract_text_from_csv(
            self,
            file_path: str,
            max_rows: int = 50,
            encoding: str = 'utf-8'
    ) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞

        Args:
            file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
            max_rows: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞

        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
        """
        try:
            file_name = Path(file_path).name

            logger.info(f"Extracting data from CSV: {file_name}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –µ—Å–ª–∏ utf-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            encodings_to_try = [encoding, 'utf-8', 'latin-1', 'cp1251']
            df = None
            used_encoding = None

            for enc in encodings_to_try:
                try:
                    df = pd.read_csv(file_path, nrows=max_rows, encoding=enc)
                    used_encoding = enc
                    logger.info(f"Successfully read CSV with encoding: {enc}")
                    break
                except UnicodeDecodeError:
                    continue

            if df is None:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª '{file_name}' –Ω–∏ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫."

            description = f"CSV —Ñ–∞–π–ª '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {used_encoding})\n"
            description += f"–†–∞–∑–º–µ—Ä: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤\n"
            description += f"–°—Ç–æ–ª–±—Ü—ã: {', '.join(df.columns.tolist())}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
            description += "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:\n"
            for col, dtype in df.dtypes.items():
                non_null = df[col].notna().sum()
                description += f"  - {col}: {dtype} (–∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {non_null}/{len(df)})\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
            numeric_cols = df.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                description += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º:\n"
                stats = df[numeric_cols].describe()
                description += stats.to_string(max_cols=5) + "\n"

            # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            description += f"\n–ü–µ—Ä–≤—ã–µ {min(10, len(df))} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:\n"
            description += df.head(10).to_string(
                max_cols=10,
                max_colwidth=50,
                index=True
            )

            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
            if len(description) > self.max_text_length:
                description = description[:self.max_text_length]
                description += "\n\n... [–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã –ø–æ –ª–∏–º–∏—Ç—É –¥–ª–∏–Ω—ã]"

            logger.info(
                f"Successfully extracted data from CSV {file_name}"
            )

            return description

        except Exception as e:
            logger.error(f"Error reading CSV file {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {str(e)}"

    async def extract_text_from_text_file(
            self,
            file_path: str,
            encoding: str = 'utf-8'
    ) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

        Args:
            file_path: –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞

        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        """
        try:
            file_name = Path(file_path).name

            logger.info(f"Reading text file: {file_name}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings_to_try = [encoding, 'utf-8', 'latin-1', 'cp1251']
            content = None
            used_encoding = None

            for enc in encodings_to_try:
                try:
                    with open(file_path, 'r', encoding=enc, errors='ignore') as f:
                        content = f.read(self.max_text_length)
                    used_encoding = enc
                    logger.info(f"Successfully read text file with encoding: {enc}")
                    break
                except UnicodeDecodeError:
                    continue

            if content is None:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª '{file_name}'."

            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(content) > self.max_text_length:
                content = content[:self.max_text_length]
                content += "\n\n... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ –ª–∏–º–∏—Ç—É –¥–ª–∏–Ω—ã]"

            result = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{file_name}' (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {used_encoding}):\n\n{content}"

            logger.info(
                f"Successfully read {len(content)} characters from text file {file_name}"
            )

            return result

        except Exception as e:
            logger.error(f"Error reading text file {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"

    async def extract_text_from_file(
            self,
            file_path: str,
            file_type: str
    ) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_type: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞

        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        """
        try:
            file_extension = Path(file_path).suffix.lower()
            file_name = Path(file_path).name

            logger.info(
                f"Extracting text from file: {file_name}, "
                f"type: {file_type}, extension: {file_extension}"
            )

            # Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)
            if file_extension in ['.xlsx', '.xls']:
                logger.info(f"Detected Excel file by extension: {file_extension}")
                return await self.extract_text_from_excel(file_path)

            # Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx, .doc)
            elif file_extension in ['.docx', '.doc']:
                logger.info(f"Detected Word file by extension: {file_extension}")
                return await self.extract_text_from_docx(file_path)

            # PDF —Ñ–∞–π–ª—ã
            elif file_extension == '.pdf':
                logger.info(f"Detected PDF file by extension: {file_extension}")
                return await self.extract_text_from_pdf(file_path)

            # CSV —Ñ–∞–π–ª—ã
            elif file_extension == '.csv':
                logger.info(f"Detected CSV file by extension: {file_extension}")
                return await self.extract_text_from_csv(file_path)

            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            elif file_extension in ['.txt', '.md', '.json', '.xml', '.log', '.rtf']:
                logger.info(f"Detected text file by extension: {file_extension}")
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read(5000)  # –ü–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                return content

            # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            else:
                logger.warning(f"Unsupported file format: {file_type}")
                return (
                    f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ '{file_name}' ({file_type}) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, "
                    f"–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
                )

        except Exception as e:
            logger.error(f"Error extracting text from {file_path}: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"

    def get_document_info(self, file_path: str) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        """
        try:
            path = Path(file_path)
            file_size_bytes = path.stat().st_size
            file_size_mb = round(file_size_bytes / (1024 * 1024), 2)

            info = {
                'filename': path.name,
                'extension': path.suffix.lower(),
                'file_size_bytes': file_size_bytes,
                'file_size_mb': file_size_mb,
                'is_supported': self.is_supported_format(file_path)
            }

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            extension = path.suffix.lower()

            if extension == '.pdf':
                try:
                    with open(file_path, 'rb') as f:
                        pdf_reader = PyPDF2.PdfReader(f)
                        info['page_count'] = len(pdf_reader.pages)
                        info['is_encrypted'] = pdf_reader.is_encrypted
                except:
                    pass

            elif extension == '.docx':
                try:
                    doc = docx.Document(file_path)
                    info['paragraph_count'] = len(doc.paragraphs)
                    info['table_count'] = len(doc.tables)
                except:
                    pass

            elif extension in ['.xlsx', '.xls']:
                try:
                    excel_file = pd.ExcelFile(file_path)
                    info['sheet_count'] = len(excel_file.sheet_names)
                    info['sheet_names'] = excel_file.sheet_names
                except:
                    pass

            elif extension == '.csv':
                try:
                    # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                    df = pd.read_csv(file_path, nrows=0)
                    info['column_count'] = len(df.columns)
                    info['columns'] = df.columns.tolist()
                except:
                    pass

            logger.info(f"Document info retrieved: {info}")
            return info

        except Exception as e:
            logger.error(f"Error getting document info for {file_path}: {e}")
            return {
                'filename': Path(file_path).name,
                'error': str(e)
            }

    def is_supported_format(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        extension = Path(file_path).suffix.lower()

        for format_type, extensions in self.supported_formats.items():
            if extension in extensions:
                return True

        logger.warning(f"Unsupported document format: {extension}")
        return False

    def get_supported_formats(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Ç–∏–ø: [—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è]}
        """
        return self.supported_formats.copy()

    def get_format_type(self, file_path: str) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ None
        """
        extension = Path(file_path).suffix.lower()

        for format_type, extensions in self.supported_formats.items():
            if extension in extensions:
                return format_type

        return None

    def validate_document(self, file_path: str) -> tuple[bool, Optional[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            Tuple (is_valid, error_message)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not Path(file_path).exists():
                return False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if not self.is_supported_format(file_path):
                return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {Path(file_path).suffix}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–µ –±–æ–ª–µ–µ 50 MB –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
            file_size_mb = Path(file_path).stat().st_size / (1024 * 1024)
            if file_size_mb > 50:
                return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} MB), –º–∞–∫—Å–∏–º—É–º 50 MB"

            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            extension = Path(file_path).suffix.lower()

            if extension == '.pdf':
                with open(file_path, 'rb') as f:
                    PyPDF2.PdfReader(f)

            elif extension == '.docx':
                docx.Document(file_path)

            elif extension in ['.xlsx', '.xls']:
                pd.ExcelFile(file_path)

            elif extension == '.csv':
                pd.read_csv(file_path, nrows=1)

            logger.info(f"Document validation successful: {Path(file_path).name}")
            return True, None

        except Exception as e:
            logger.error(f"Document validation error: {e}")
            return False, str(e)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

async def extract_document_text(
        file_path: str,
        file_type: str,
        max_length: int = 5000
) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_type: MIME —Ç–∏–ø
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞

    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    processor = DocumentProcessor(max_text_length=max_length)
    return await processor.extract_text_from_file(file_path, file_type)


def get_document_metadata(file_path: str) -> dict:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    processor = DocumentProcessor()
    return processor.get_document_info(file_path)


def check_document_valid(file_path: str) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ
    """
    processor = DocumentProcessor()
    is_valid, _ = processor.validate_document(file_path)
    return is_valid