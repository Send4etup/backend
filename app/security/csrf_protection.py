# app/security/csrf_protection.py
"""
CSRF –∑–∞—â–∏—Ç–∞ –¥–ª—è –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∞—Ç–∞–∫–∏ –º–µ–∂—Å–∞–π—Ç–æ–≤–æ–π –ø–æ–¥–¥–µ–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import os
import secrets
import logging
from fastapi_csrf_protect import CsrfProtect
from pydantic import BaseModel

logger = logging.getLogger(__name__)

class CsrfSettings(BaseModel):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ CSRF –∑–∞—â–∏—Ç—ã"""

    # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤
    secret_key: str = os.getenv("CSRF_SECRET_KEY", secrets.token_urlsafe(32))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ cookie
    cookie_name: str = "csrf_token"
    cookie_max_age: int = 3600  # 1 —á–∞—Å
    cookie_samesite: str = "lax"  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
    # cookie_secure: bool = True
    cookie_secure: bool = os.getenv("ENVIRONMENT") == "production"  # HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    cookie_httponly: bool = False  # Frontend –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ headers
    cookie_domain: str = None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    header_name: str = "X-CSRF-Token"
    header_type: str = "header"  # form | header | both

    # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
    token_lifetime: int = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


@CsrfProtect.load_config
def get_csrf_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CSRF –¥–ª—è FastAPI-CSRF-Protect"""
    return CsrfSettings()


def init_csrf_protection():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    settings = CsrfSettings()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if not os.getenv("CSRF_SECRET_KEY"):
        csrf_key = secrets.token_urlsafe(32)
        logger.warning(
            f"üîë CSRF_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á. "
            f"–î–æ–±–∞–≤—å—Ç–µ –≤ .env: CSRF_SECRET_KEY={csrf_key}"
        )
    else:
        logger.info("‚úÖ CSRF –∑–∞—â–∏—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞)
    logger.info(f"CSRF –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    logger.info(f"  Cookie name: {settings.cookie_name}")
    logger.info(f"  Cookie secure: {settings.cookie_secure}")
    logger.info(f"  Cookie samesite: {settings.cookie_samesite}")
    logger.info(f"  Header name: {settings.header_name}")
    logger.info(f"  Token lifetime: {settings.token_lifetime}s")

    return settings


def validate_csrf_token_manually(token: str, cookie_token: str) -> bool:
    """
    –†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è CSRF —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    """
    if not token or not cookie_token:
        return False

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    return token == cookie_token


def get_csrf_error_response():
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ CSRF –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    return {
        "error": "CSRF_TOKEN_INVALID",
        "message": "CSRF —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "code": "SECURITY_VIOLATION",
        "details": {
            "required_header": "X-CSRF-Token",
            "how_to_fix": "–ü–æ–ª—É—á–∏—Ç–µ CSRF —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ GET /api/security/csrf-token –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-CSRF-Token"
        }
    }