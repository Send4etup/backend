# app/startup.py
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
"""
from app.config import settings
from app.services.telegram_validator import init_telegram_validator
from app.database import init_database
from app.services.ai_service import get_ai_service
import logging
import os


logger = logging.getLogger(__name__)


async def startup_event():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º Telegram –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
    """
    logger.info("üöÄ Starting –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç API...")

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = settings.TELEGRAM_BOT_TOKEN
        if not bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found in environment variables!")
            logger.error("Please add TELEGRAM_BOT_TOKEN to your .env file")
            raise RuntimeError("TELEGRAM_BOT_TOKEN is required for secure authentication")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        try:
            init_telegram_validator(bot_token)
            logger.info("‚úÖ Telegram validator initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Telegram validator: {e}")
            raise RuntimeError(f"Telegram validator initialization failed: {e}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not settings.SECRET_KEY or settings.SECRET_KEY == "your-secret-key":
            logger.warning("‚ö†Ô∏è Using default SECRET_KEY - change it in production!")

        if not settings.OPENAI_API_KEY:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY not configured - AI features will be limited")

        # 4. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        from pathlib import Path
        upload_dir = Path(settings.UPLOAD_DIR)
        upload_dir.mkdir(exist_ok=True)
        logger.info(f"üìÅ Upload directory ready: {upload_dir}")

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from app.database import create_database
            create_database()
            logger.info("‚úÖ Database initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Database initialization failed: {e}")
            raise RuntimeError(f"Database setup failed: {e}")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞
        try:
            from app.services.ai_service import get_ai_service
            ai_service = get_ai_service()
            if ai_service:
                health_check = await ai_service.health_check()
                if health_check:
                    logger.info("‚úÖ AI service is healthy")
                else:
                    logger.warning("‚ö†Ô∏è AI service health check failed")
            else:
                logger.warning("‚ö†Ô∏è AI service not available")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI service check failed: {e}")

        # 7. –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        environment = os.getenv("ENVIRONMENT", "development")
        logger.info(f"üéØ Environment: {environment}")
        logger.info("‚úÖ Application startup completed successfully")

        # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        logger.info("üîê Security features enabled:")
        logger.info("   - Telegram HMAC-SHA256 validation")
        logger.info("   - JWT token authentication")
        logger.info("   - CORS protection")
        logger.info("   - Request rate limiting")

    except Exception as e:
        logger.error(f"‚ùå CRITICAL: Application startup failed: {e}")
        logger.error("Application cannot start safely. Exiting...")
        raise SystemExit(1)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def validate_security_config():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not settings.TELEGRAM_BOT_TOKEN:
        issues.append("TELEGRAM_BOT_TOKEN not configured")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SECRET_KEY
    if not settings.SECRET_KEY or settings.SECRET_KEY == "your-secret-key":
        issues.append("SECRET_KEY using default value (insecure)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    environment = os.getenv("ENVIRONMENT", "development")
    if environment == "production":
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è production
        if settings.SECRET_KEY == "your-secret-key":
            issues.append("Production SECRET_KEY must be changed")

        if not settings.OPENAI_API_KEY:
            issues.append("OPENAI_API_KEY required for production")

    if issues:
        logger.error("‚ùå Security configuration issues found:")
        for issue in issues:
            logger.error(f"   - {issue}")

        if environment == "production":
            raise RuntimeError("Security issues prevent production startup")
        else:
            logger.warning("‚ö†Ô∏è Development mode: some security issues ignored")

    return len(issues) == 0


async def shutdown_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë Shutting down –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend...")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤

    logger.info("‚úÖ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend shutdown complete!")