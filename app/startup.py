# app/startup.py
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
"""
from app.database import init_database
from app.services.ai_service import get_ai_service
import logging

logger = logging.getLogger(__name__)


async def startup_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend...")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("üìä Initializing database...")
    db_success = init_database()

    if not db_success:
        logger.error("‚ùå Failed to initialize database")
        raise Exception("Database initialization failed")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å
    logger.info("ü§ñ Checking AI service...")
    ai_service = get_ai_service()

    if ai_service:
        try:
            health_ok = await ai_service.health_check()
            if health_ok:
                logger.info("‚úÖ AI service is healthy")
            else:
                logger.warning("‚ö†Ô∏è AI service health check failed")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI service error: {e}")
    else:
        logger.warning("‚ö†Ô∏è AI service not available")

    # 3. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    from pathlib import Path
    upload_dir = Path("uploads")
    upload_dir.mkdir(exist_ok=True)
    logger.info(f"üìÅ Upload directory ready: {upload_dir.absolute()}")

    logger.info("‚úÖ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend started successfully!")


async def shutdown_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üõë Shutting down –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend...")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤

    logger.info("‚úÖ –¢–æ–≤–∞—Ä–∏—â–ë–æ—Ç Backend shutdown complete!")